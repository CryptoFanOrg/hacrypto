// Copyright (c) 2007-2014, Galois, Inc.
//
// Author: Sigbjorn Finne, Dylan McNamee, Joe Kiniry, Joey Dodds

// Based on spec in FIPS180-2 doc:
//  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf

// @kiniry 8 July 2014
// This is a---munged by Dylan, Joe K. and Joey---version of the Cryptol 
// version 1 specification of SHA-256 that we are keeping for historical 
// reasons.  It is a partial conversion to Cryptol 2 of the original
// ugly SHA256 from Sigbjorn.  We have not finished with endian conversion
// nor do we have any certainty that the spec is right; it only typechecks.
// https://github.com/GaloisInc/hacrypto

module SHA2 where

sha256 : {a} (64 >= width (a * 8),
              512 * ((a + 72) / 64) - 8 * a >= 65) =>
         [a][8] -> [256]
sha256 msg =
    join (Hs!0)
    where
      Hs =
          [H0_256] #
          [sha2_256_block(H, [w | w <- split M], SHA256_Ks) 
              | H <- Hs
              | M <- pad256 (join [c | c <- msg])]

// H^{(0)}

H0_256 : [8][32]
H0_256 =
    [0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F,
     0x9B05688C, 0x1F83D9AB, 0x5BE0CD19]

H0_384 : [8][64]
H0_384 =
    [0xCBBB9D5DC1059ED8, 0x629A292A367CD507, 0x9159015A3070DD17,
     0x152FECD8F70E5939, 0x67332667FFC00B31, 0x8EB44A8768581511,
     0xDB0C2E0D64F98FA7, 0x47B5481DBEFA4FA4]

H0_512 : [8][64]
H0_512 =
    [0x6A09E667F3BCC908, 0xBB67AE8584CAA73B, 0x3C6EF372FE94F82B,
     0xA54FF53A5F1D36F1, 0x510E527FADE682D1, 0x9B05688C2B3E6C1F,
     0x1F83D9ABFB41BD6B, 0x5BE0CD19137E2179]

pad256 : {a} (64 >= width a, 512 * ((a + 576) / 512) - a >= 65) =>
      [a] -> [(a + 65 + 511) / 512][512]
pad256 msg = split (msg # [True] # zero # (width msg : [64]))

SHA256_Ks : [64][32]
SHA256_Ks =
    [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B,
     0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01,
     0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7,
     0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
     0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152,
     0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147,
     0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC,
     0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
     0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819,
     0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08,
     0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F,
     0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
     0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2]

SHA384_and_SHA512_Ks : [80][64]
SHA384_and_SHA512_Ks =
    [0x428A2F98D728AE22, 0x7137449123EF65CD, 0xB5C0FBCFEC4D3B2F,
     0xE9B5DBA58189DBBC, 0x3956C25BF348B538, 0x59F111F1B605D019,
     0x923F82A4AF194F9B, 0xAB1C5ED5DA6D8118, 0xD807AA98A3030242,
     0x12835B0145706FBE, 0x243185BE4EE4B28C, 0x550C7DC3D5FFB4E2,
     0x72BE5D74F27B896F, 0x80DEB1FE3B1696B1, 0x9BDC06A725C71235,
     0xC19BF174CF692694, 0xE49B69C19EF14AD2, 0xEFBE4786384F25E3,
     0x0FC19DC68B8CD5B5, 0x240CA1CC77AC9C65, 0x2DE92C6F592B0275,
     0x4A7484AA6EA6E483, 0x5CB0A9DCBD41FBD4, 0x76F988DA831153B5,
     0x983E5152EE66DFAB, 0xA831C66D2DB43210, 0xB00327C898FB213F,
     0xBF597FC7BEEF0EE4, 0xC6E00BF33DA88FC2, 0xD5A79147930AA725,
     0x06CA6351E003826F, 0x142929670A0E6E70, 0x27B70A8546D22FFC,
     0x2E1B21385C26C926, 0x4D2C6DFC5AC42AED, 0x53380D139D95B3DF,
     0x650A73548BAF63DE, 0x766A0ABB3C77B2A8, 0x81C2C92E47EDAEE6,
     0x92722C851482353B, 0xA2BFE8A14CF10364, 0xA81A664BBC423001,
     0xC24B8B70D0F89791, 0xC76C51A30654BE30, 0xD192E819D6EF5218,
     0xD69906245565A910, 0xF40E35855771202A, 0x106AA07032BBD1B8,
     0x19A4C116B8D2D0C8, 0x1E376C085141AB53, 0x2748774CDF8EEB99,
     0x34B0BCB5E19B48A8, 0x391C0CB3C5C95A63, 0x4ED8AA4AE3418ACB,
     0x5B9CCA4F7763E373, 0x682E6FF3D6B2B8A3, 0x748F82EE5DEFB2FC,
     0x78A5636F43172F60, 0x84C87814A1F0AB72, 0x8CC702081A6439EC,
     0x90BEFFFA23631E28, 0xA4506CEBDE82BDE9, 0xBEF9A3F7B2C67915,
     0xC67178F2E372532B, 0xCA273ECEEA26619C, 0xD186B8C721C0C207,
     0xEADA7DD6CDE0EB1E, 0xF57D4F7FEE6ED178, 0x06F067AA72176FBA,
     0x0A637DC5A2C898A6, 0x113F9804BEF90DAE, 0x1B710B35131C471B,
     0x28DB77F523047D84, 0x32CAAB7B40C72493, 0x3C9EBE0A15C9BEBC,
     0x431D67C49C100D4C, 0x4CC5D4BECB3E42B6, 0x597F299CFC657E2A,
     0x5FCB6FAB3AD6FAEC, 0x6C44198C4A475817]

sigma0_256 : [32] -> [32]
sigma0_256 x = x >>> 7 ^ x >>> 18 ^ x >> 3
sigma1_256 y = y >>> 17 ^ y >>> 19 ^ y >> 10

Sigma0_256 x = x >>> 2 ^ x >>> 13 ^ x >>> 22
Sigma1_256 x = x >>> 6 ^ x >>> 11 ^ x >>> 25

sigma0_512 x = x >>> 1 ^ x >>> 8 ^ x >> 7
sigma1_512 y = y >>> 19 ^ y >>> 61 ^ y >> 6

Sigma0_512 x = x >>> 28 ^ x >>> 34 ^ x >>> 39
Sigma1_512 x = x >>> 14 ^ x >>> 18 ^ x >>> 41

Ch x y z  = x && y ^ ~x && z
Maj x y z = x && y ^ x && z ^ y && z

type SHA256 = 0
type SHA512 = 1
type SHA384 = SHA512

sha2_256_block = sha2_block`{variant=SHA256}
  (sigma0_256, sigma1_256, Sigma0_256, Sigma1_256)
sha2_384_block = sha2_block`{variant=SHA384}
  (sigma0_512, sigma1_512, Sigma0_512, Sigma1_512)
sha2_512_block = sha2_block`{variant=SHA512}
  (sigma0_512, sigma1_512, Sigma0_512, Sigma1_512)

sha2_block : {variant, rounds, wordsize, prefix} 
              (fin variant, fin rounds,
               SHA256 <= variant, variant <= SHA512, 
               rounds == 64+16*variant,
               wordsize == 32*(variant+1),
               prefix == rounds+1) =>
             ([wordsize] -> [wordsize], [wordsize] -> [wordsize], 
              [wordsize] -> [wordsize], [wordsize] -> [wordsize]) ->
             ([8][wordsize], [16][wordsize], [rounds][wordsize]) ->
             [8][wordsize]
sha2_block (sigma0, sigma1, Sigma0, Sigma1)
           ([H0, H1, H2, H3, H4, H5, H6, H7], M, Ks) =
           [H0 + As!0, H1 + Bs!0, H2 + Cs!0, H3 + Ds!0,
            H4 + Es!0, H5 + Fs!0, H6 + Gs!0, H7 + Hs!0]
    where
      Ws : [rounds][wordsize]
      Ws =
          M # [ (sigma1 W2) + W7 + (sigma0 W15) + W16
                  | W2 <- drop`{16 - 2} Ws
                  | W7 <- drop`{16 - 7} Ws
                  | W15 <- drop`{16 - 15} Ws
                  | W16 <- drop`{16 - 16} Ws
                  | t <- [16 .. rounds-1]:[_][7] ]
      // explain functional/recurrence encoding of their stateful, procedural algorithm
      As, Bs, Cs, Ds, Es, Fs, Gs, Hs : [prefix][wordsize]
      As = 
           take`{prefix}
           ([H0] # [t1 + t2 | t1 <- T1s
                            | t2 <- T2s])
      Bs = take`{prefix}([H1] # As)
      Cs = take`{prefix}([H2] # Bs)
      Ds = take`{prefix}([H3] # Cs)
      Es =
           take`{prefix}([H4] #
                         [d + t1 | d <- Ds
                                 | t1 <- T1s])
      Fs = take`{prefix}([H5] # Es)
      Gs = take`{prefix}([H6] # Fs)
      Hs = take`{prefix}([H7] # Gs)
      CHs =
           [Ch e f g | e <- Es
                     | f <- Fs
                     | g <- Gs]
      T1s =
           [h + (Sigma1 e) + ch + k + w
                   | e <- Es
                   | h <- Hs
                   | ch <- CHs
                   | k <- Ks
                   | w <- Ws]
      T2s =
           [(Sigma0 a) + (Maj a b c)
                    | a <- As
                    | b <- Bs
                    | c <- Cs]

test_vector0 =
    sha256 "" ==
    0xE3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855
test_vector1 =
    sha256 "The quick brown fox jumps over the lazy dog" ==
    0xD7A8FBB307D7809469CA9ABCB0082E4F8D5651E46D3CDB762D02D0BF37C9E592
test_vector2 =
    sha256 "The quick brown fox jumps over the lazy cog" ==
    0xE4C4D8F3BF76B692DE791A173E05321150F7A345B46484FE427F6ACC7ECC81BE
test_vector3 =
    sha256 "abc" ==
    0xBA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD
test_vector4 =
    sha256 "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" ==
    0x248D6A61D20638B8E5C026930C3E6039A33CE45964FF2167F6ECEDD419DB06C1

test_vectors = 
  [test_vector0, test_vector1, test_vector2, test_vector3, test_vector4] == ~zero

no_collisions: ([1][8], [1][8]) -> Bit
property no_collisions(x, y) = (x == y) || (sha256 x != sha256 y)
