/*
 * Test data strategy for hacrypto.BCSHA_256.
 *
 * Generated by JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178), 2014-06-30 15:35 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

 
package hacrypto.BCSHA_256_JML_Data;

import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;

/**
 * Test data strategy for hacrypto.BCSHA_256. Provides
 * test values for parameter "byte[] message" 
 * of method "byte[] digest(byte[])". 
 * 
 * @author JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178)
 * @version 2014-06-30 15:35 -0700
 */
public /*@ nullable_by_default */ class digest__byte1DArray_message__0__message
  extends ClassStrategy_byte1DArray {
  /**
   * @return local-scope values for parameter 
   *  "byte[] message".
   */
  public RepeatedAccessIterator<?> localValues() {
    return new ObjectArrayIterator<Object>
    (new Object[]
     { /* add local-scope byte[] values or generators here */ });
  }

  /**
   * Constructor.
   * The maximum length of generated arrays can be controlled here for
   * parameter "byte[] message" of method "byte[] digest(byte[])"
   * by changing the parameter to <code>setMaxLength</code>.
   * In addition, the data generators used can be changed by adding 
   * additional data class lines, or by removing some of the automatically 
   * generated ones. Since this is the lowest level of strategy, the 
   * behavior will be exactly as you specify here if you clear the existing 
   * list of classes first.
   *
   * @see NonPrimitiveStrategy#addDataClass(Class<?>)
   * @see NonPrimitiveStrategy#clearDataClasses()
   * @see ArrayStrategy#setMaxLength(int)
   */
  public digest__byte1DArray_message__0__message() {
    super();
    // uncomment to control the maximum array length, 1 by default
    // setMaxLength(1); 
    // uncomment to control the maximum reflective instantiation
    // recursion depth, 0 by default
    // setMaxRecursionDepth(0);
  }
}
